/**
 * Generated by @openapi-codegen
 *
 * @version 2.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type GameControllerBetHistoryQueryParams = {
  game?:
    | 1
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20;
  player?: string;
  /**
   * @minimum 1
   */
  page?: number;
  /**
   * @minimum 1
   * @maximum 100
   */
  limit?: number;
};

export type GameControllerBetHistoryError = Fetcher.ErrorWrapper<undefined>;

export type GameControllerBetHistoryResponse = Schemas.GameResultDto[];

export type GameControllerBetHistoryVariables = {
  queryParams?: GameControllerBetHistoryQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGameControllerBetHistory = (
  variables: GameControllerBetHistoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GameControllerBetHistoryResponse,
    GameControllerBetHistoryError,
    undefined,
    {},
    GameControllerBetHistoryQueryParams,
    {}
  >({ url: "/game/bet-history", method: "get", ...variables, signal });

export const useGameControllerBetHistory = <
  TData = GameControllerBetHistoryResponse,
>(
  variables: GameControllerBetHistoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GameControllerBetHistoryResponse,
      GameControllerBetHistoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GameControllerBetHistoryResponse,
    GameControllerBetHistoryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/game/bet-history",
      operationId: "gameControllerBetHistory",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGameControllerBetHistory(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type GameControllerGetChartQueryParams = {
  period: 0 | 1 | 2 | -1;
  type: 0 | -1;
};

export type GameControllerGetChartError = Fetcher.ErrorWrapper<undefined>;

export type GameControllerGetChartResponse = Schemas.ChartObject[];

export type GameControllerGetChartVariables = {
  queryParams: GameControllerGetChartQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGameControllerGetChart = (
  variables: GameControllerGetChartVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GameControllerGetChartResponse,
    GameControllerGetChartError,
    undefined,
    {},
    GameControllerGetChartQueryParams,
    {}
  >({ url: "/game/chart", method: "get", ...variables, signal });

export const useGameControllerGetChart = <
  TData = GameControllerGetChartResponse,
>(
  variables: GameControllerGetChartVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GameControllerGetChartResponse,
      GameControllerGetChartError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GameControllerGetChartResponse,
    GameControllerGetChartError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/game/chart",
      operationId: "gameControllerGetChart",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGameControllerGetChart({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type GameControllerFreeSpinTrigggerQueryParams = {
  player: string;
  token: string;
};

export type GameControllerFreeSpinTrigggerError =
  Fetcher.ErrorWrapper<undefined>;

export type GameControllerFreeSpinTrigggerVariables = {
  queryParams: GameControllerFreeSpinTrigggerQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGameControllerFreeSpinTriggger = (
  variables: GameControllerFreeSpinTrigggerVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.TransactionResponse,
    GameControllerFreeSpinTrigggerError,
    undefined,
    {},
    GameControllerFreeSpinTrigggerQueryParams,
    {}
  >({ url: "/game/free-spin-trigger", method: "get", ...variables, signal });

export const useGameControllerFreeSpinTriggger = <
  TData = Schemas.TransactionResponse,
>(
  variables: GameControllerFreeSpinTrigggerVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.TransactionResponse,
      GameControllerFreeSpinTrigggerError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.TransactionResponse,
    GameControllerFreeSpinTrigggerError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/game/free-spin-trigger",
      operationId: "gameControllerFreeSpinTriggger",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGameControllerFreeSpinTriggger(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type GameControllerAssignUsernameError = Fetcher.ErrorWrapper<undefined>;

export type GameControllerAssignUsernameVariables = {
  body: Schemas.AssignUsernameInput;
} & ApiContext["fetcherOptions"];

export const fetchGameControllerAssignUsername = (
  variables: GameControllerAssignUsernameVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UsernameObject,
    GameControllerAssignUsernameError,
    Schemas.AssignUsernameInput,
    {},
    {},
    {}
  >({ url: "/game/assign-username", method: "post", ...variables, signal });

export const useGameControllerAssignUsername = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.UsernameObject,
      GameControllerAssignUsernameError,
      GameControllerAssignUsernameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.UsernameObject,
    GameControllerAssignUsernameError,
    GameControllerAssignUsernameVariables
  >({
    mutationFn: (variables: GameControllerAssignUsernameVariables) =>
      fetchGameControllerAssignUsername({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GameControllerGetUserProfileQueryParams = {
  wallet: string;
};

export type GameControllerGetUserProfileError = Fetcher.ErrorWrapper<undefined>;

export type GameControllerGetUserProfileVariables = {
  queryParams: GameControllerGetUserProfileQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGameControllerGetUserProfile = (
  variables: GameControllerGetUserProfileVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.UsernameObject,
    GameControllerGetUserProfileError,
    undefined,
    {},
    GameControllerGetUserProfileQueryParams,
    {}
  >({ url: "/game/user-profile", method: "get", ...variables, signal });

export const useGameControllerGetUserProfile = <
  TData = Schemas.UsernameObject,
>(
  variables: GameControllerGetUserProfileVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UsernameObject,
      GameControllerGetUserProfileError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.UsernameObject,
    GameControllerGetUserProfileError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/game/user-profile",
      operationId: "gameControllerGetUserProfile",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGameControllerGetUserProfile(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type GameControllerGetMultiplayerGameHistoryQueryParams = {
  game: number;
};

export type GameControllerGetMultiplayerGameHistoryError =
  Fetcher.ErrorWrapper<undefined>;

export type GameControllerGetMultiplayerGameHistoryResponse =
  Schemas.MultiplayerGameHistoryObject[];

export type GameControllerGetMultiplayerGameHistoryVariables = {
  queryParams: GameControllerGetMultiplayerGameHistoryQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchGameControllerGetMultiplayerGameHistory = (
  variables: GameControllerGetMultiplayerGameHistoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    GameControllerGetMultiplayerGameHistoryResponse,
    GameControllerGetMultiplayerGameHistoryError,
    undefined,
    {},
    GameControllerGetMultiplayerGameHistoryQueryParams,
    {}
  >({
    url: "/game/multiplayer-game-history",
    method: "get",
    ...variables,
    signal,
  });

export const useGameControllerGetMultiplayerGameHistory = <
  TData = GameControllerGetMultiplayerGameHistoryResponse,
>(
  variables: GameControllerGetMultiplayerGameHistoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GameControllerGetMultiplayerGameHistoryResponse,
      GameControllerGetMultiplayerGameHistoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    GameControllerGetMultiplayerGameHistoryResponse,
    GameControllerGetMultiplayerGameHistoryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/game/multiplayer-game-history",
      operationId: "gameControllerGetMultiplayerGameHistory",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGameControllerGetMultiplayerGameHistory(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type RefundControllerRefundGameError = Fetcher.ErrorWrapper<undefined>;

export type RefundControllerRefundGameVariables = {
  body: Schemas.RefundInput;
} & ApiContext["fetcherOptions"];

export const fetchRefundControllerRefundGame = (
  variables: RefundControllerRefundGameVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.TransactionResponse,
    RefundControllerRefundGameError,
    Schemas.RefundInput,
    {},
    {},
    {}
  >({ url: "/refund/refund-game", method: "post", ...variables, signal });

export const useRefundControllerRefundGame = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TransactionResponse,
      RefundControllerRefundGameError,
      RefundControllerRefundGameVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TransactionResponse,
    RefundControllerRefundGameError,
    RefundControllerRefundGameVariables
  >({
    mutationFn: (variables: RefundControllerRefundGameVariables) =>
      fetchRefundControllerRefundGame({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type RefundControllerReIterateError = Fetcher.ErrorWrapper<undefined>;

export type RefundControllerReIterateVariables = {
  body: Schemas.RefundInput;
} & ApiContext["fetcherOptions"];

export const fetchRefundControllerReIterate = (
  variables: RefundControllerReIterateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.TransactionResponse,
    RefundControllerReIterateError,
    Schemas.RefundInput,
    {},
    {},
    {}
  >({ url: "/refund/re-iterate", method: "post", ...variables, signal });

export const useRefundControllerReIterate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.TransactionResponse,
      RefundControllerReIterateError,
      RefundControllerReIterateVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.TransactionResponse,
    RefundControllerReIterateError,
    RefundControllerReIterateVariables
  >({
    mutationFn: (variables: RefundControllerReIterateVariables) =>
      fetchRefundControllerReIterate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type StatisticControllerGetStatsError = Fetcher.ErrorWrapper<undefined>;

export type StatisticControllerGetStatsVariables = ApiContext["fetcherOptions"];

export const fetchStatisticControllerGetStats = (
  variables: StatisticControllerGetStatsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.JustBetStats,
    StatisticControllerGetStatsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/statistic/stats", method: "get", ...variables, signal });

export const useStatisticControllerGetStats = <TData = Schemas.JustBetStats,>(
  variables: StatisticControllerGetStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.JustBetStats,
      StatisticControllerGetStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.JustBetStats,
    StatisticControllerGetStatsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/statistic/stats",
      operationId: "statisticControllerGetStats",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchStatisticControllerGetStats(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type StatisticControllerGetMiningStatsError =
  Fetcher.ErrorWrapper<undefined>;

export type StatisticControllerGetMiningStatsVariables =
  ApiContext["fetcherOptions"];

export const fetchStatisticControllerGetMiningStats = (
  variables: StatisticControllerGetMiningStatsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.MiningStatistics,
    StatisticControllerGetMiningStatsError,
    undefined,
    {},
    {},
    {}
  >({ url: "/statistic/mininig-status", method: "get", ...variables, signal });

export const useStatisticControllerGetMiningStats = <
  TData = Schemas.MiningStatistics,
>(
  variables: StatisticControllerGetMiningStatsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MiningStatistics,
      StatisticControllerGetMiningStatsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.MiningStatistics,
    StatisticControllerGetMiningStatsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/statistic/mininig-status",
      operationId: "statisticControllerGetMiningStats",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchStatisticControllerGetMiningStats(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ReferralControllerGetReferralHistoryByPlayerError =
  Fetcher.ErrorWrapper<undefined>;

export type ReferralControllerGetReferralHistoryByPlayerResponse =
  Schemas.ReferralRewardEntity[];

export type ReferralControllerGetReferralHistoryByPlayerVariables =
  ApiContext["fetcherOptions"];

export const fetchReferralControllerGetReferralHistoryByPlayer = (
  variables: ReferralControllerGetReferralHistoryByPlayerVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    ReferralControllerGetReferralHistoryByPlayerResponse,
    ReferralControllerGetReferralHistoryByPlayerError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/referral/referral-history/{address}",
    method: "get",
    ...variables,
    signal,
  });

export const useReferralControllerGetReferralHistoryByPlayer = <
  TData = ReferralControllerGetReferralHistoryByPlayerResponse,
>(
  variables: ReferralControllerGetReferralHistoryByPlayerVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReferralControllerGetReferralHistoryByPlayerResponse,
      ReferralControllerGetReferralHistoryByPlayerError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    ReferralControllerGetReferralHistoryByPlayerResponse,
    ReferralControllerGetReferralHistoryByPlayerError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/referral/referral-history/{address}",
      operationId: "referralControllerGetReferralHistoryByPlayer",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchReferralControllerGetReferralHistoryByPlayer(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ReferralControllerRewardsDistributionHistoryError =
  Fetcher.ErrorWrapper<undefined>;

export type ReferralControllerRewardsDistributionHistoryResponse =
  Schemas.ReferralClaimEntity[];

export type ReferralControllerRewardsDistributionHistoryVariables =
  ApiContext["fetcherOptions"];

export const fetchReferralControllerRewardsDistributionHistory = (
  variables: ReferralControllerRewardsDistributionHistoryVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    ReferralControllerRewardsDistributionHistoryResponse,
    ReferralControllerRewardsDistributionHistoryError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/referral/rewards-distribution-history/{address}",
    method: "get",
    ...variables,
    signal,
  });

export const useReferralControllerRewardsDistributionHistory = <
  TData = ReferralControllerRewardsDistributionHistoryResponse,
>(
  variables: ReferralControllerRewardsDistributionHistoryVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReferralControllerRewardsDistributionHistoryResponse,
      ReferralControllerRewardsDistributionHistoryError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    ReferralControllerRewardsDistributionHistoryResponse,
    ReferralControllerRewardsDistributionHistoryError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/referral/rewards-distribution-history/{address}",
      operationId: "referralControllerRewardsDistributionHistory",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchReferralControllerRewardsDistributionHistory(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type ReferralControllerCodesVolumeAndRewardAmountsQueryParams = {
  codes: string;
};

export type ReferralControllerCodesVolumeAndRewardAmountsError =
  Fetcher.ErrorWrapper<undefined>;

export type ReferralControllerCodesVolumeAndRewardAmountsResponse =
  Schemas.CodesVolumeAndReward[];

export type ReferralControllerCodesVolumeAndRewardAmountsVariables = {
  queryParams: ReferralControllerCodesVolumeAndRewardAmountsQueryParams;
} & ApiContext["fetcherOptions"];

export const fetchReferralControllerCodesVolumeAndRewardAmounts = (
  variables: ReferralControllerCodesVolumeAndRewardAmountsVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    ReferralControllerCodesVolumeAndRewardAmountsResponse,
    ReferralControllerCodesVolumeAndRewardAmountsError,
    undefined,
    {},
    ReferralControllerCodesVolumeAndRewardAmountsQueryParams,
    {}
  >({
    url: "/referral/code-volume-and-rewards",
    method: "get",
    ...variables,
    signal,
  });

export const useReferralControllerCodesVolumeAndRewardAmounts = <
  TData = ReferralControllerCodesVolumeAndRewardAmountsResponse,
>(
  variables: ReferralControllerCodesVolumeAndRewardAmountsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      ReferralControllerCodesVolumeAndRewardAmountsResponse,
      ReferralControllerCodesVolumeAndRewardAmountsError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    ReferralControllerCodesVolumeAndRewardAmountsResponse,
    ReferralControllerCodesVolumeAndRewardAmountsError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/referral/code-volume-and-rewards",
      operationId: "referralControllerCodesVolumeAndRewardAmounts",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchReferralControllerCodesVolumeAndRewardAmounts(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/game/bet-history";
      operationId: "gameControllerBetHistory";
      variables: GameControllerBetHistoryVariables;
    }
  | {
      path: "/game/chart";
      operationId: "gameControllerGetChart";
      variables: GameControllerGetChartVariables;
    }
  | {
      path: "/game/free-spin-trigger";
      operationId: "gameControllerFreeSpinTriggger";
      variables: GameControllerFreeSpinTrigggerVariables;
    }
  | {
      path: "/game/user-profile";
      operationId: "gameControllerGetUserProfile";
      variables: GameControllerGetUserProfileVariables;
    }
  | {
      path: "/game/multiplayer-game-history";
      operationId: "gameControllerGetMultiplayerGameHistory";
      variables: GameControllerGetMultiplayerGameHistoryVariables;
    }
  | {
      path: "/statistic/stats";
      operationId: "statisticControllerGetStats";
      variables: StatisticControllerGetStatsVariables;
    }
  | {
      path: "/statistic/mininig-status";
      operationId: "statisticControllerGetMiningStats";
      variables: StatisticControllerGetMiningStatsVariables;
    }
  | {
      path: "/referral/referral-history/{address}";
      operationId: "referralControllerGetReferralHistoryByPlayer";
      variables: ReferralControllerGetReferralHistoryByPlayerVariables;
    }
  | {
      path: "/referral/rewards-distribution-history/{address}";
      operationId: "referralControllerRewardsDistributionHistory";
      variables: ReferralControllerRewardsDistributionHistoryVariables;
    }
  | {
      path: "/referral/code-volume-and-rewards";
      operationId: "referralControllerCodesVolumeAndRewardAmounts";
      variables: ReferralControllerCodesVolumeAndRewardAmountsVariables;
    };
