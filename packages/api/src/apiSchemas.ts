/**
 * Generated by @openapi-codegen
 *
 * @version 2.0
 */
export type PriceResponse = {
  token: string;
  price: number;
};

export type GameResultDto = {
  id: string;
  game:
    | "COINFLIP"
    | "RANGE"
    | "WHEEL"
    | "PLINKO"
    | "MOON"
    | "LOTTERY"
    | "RPS"
    | "DICE"
    | "LIMBO"
    | "SLOT"
    | "ROULETTE"
    | "MINES"
    | "VIDEO_POKER"
    | "KENO"
    | "BACCARAT"
    | "HORSE_RACE"
    | "BLACKJACK"
    | "HOLDEM_POKER"
    | "WINR_BONANZA"
    | "ONE_HAND_BLACKJACK";
  /**
   * @default 0
   */
  wager: number;
  /**
   * @default 0
   */
  wagerInDollar: number;
  /**
   * @default 0
   */
  playedGameCount: number;
  /**
   * @default 0
   */
  multiplier: number;
  /**
   * @default 0
   */
  profit: number;
  /**
   * @default 0
   */
  profitInDollar: number;
  /**
   * @default 0
   */
  payout: number;
  /**
   * @default 0
   */
  payoutInDollar: number;
  /**
   * @default 0
   */
  loss: number;
  /**
   * @default 0
   */
  lossInDollar: number;
  won: boolean;
  player: string;
  requestId: number;
  token: string;
  amountOut: number;
  username: string;
  time: number;
  /**
   * @default null
   */
  hash?: string | null;
  createdAt: number;
};

export type ChartObject = {
  x?: string | null;
  y?: number | null;
};

export type TransactionResponse = {
  success: boolean;
  message: string;
};

export type AssignUsernameInput = {
  username: string;
  walletAddress: string;
  signature: string;
  avatar?: number | null;
};

export type UsernameObject = {
  username?: string | null;
  activeSince?: number | null;
  avatar?: number | null;
};

export type MultiplayerGameHistoryObject = {
  /**
   * @default 0
   */
  result: number;
};

export type RefundInput = {
  game:
    | "COINFLIP"
    | "RANGE"
    | "WHEEL"
    | "PLINKO"
    | "MOON"
    | "LOTTERY"
    | "RPS"
    | "DICE"
    | "LIMBO"
    | "SLOT"
    | "ROULETTE"
    | "MINES"
    | "VIDEO_POKER"
    | "KENO"
    | "BACCARAT"
    | "HORSE_RACE"
    | "BLACKJACK"
    | "HOLDEM_POKER"
    | "WINR_BONANZA"
    | "ONE_HAND_BLACKJACK";
  player: string;
};

export type JustBetStats = {
  profitShared: number;
  totalVolume: number;
  gameCount: number;
  bankrollProfit: number;
  playerCount: number;
};

export type MiningStatistics = {
  /**
   * @default 0
   */
  totalBurned: number;
  /**
   * @default 0
   */
  totalStaked: number;
  /**
   * @default 0
   */
  totalSupply: number;
  /**
   * @default 0
   */
  circSupply: number;
  /**
   * @default 0
   */
  maxSupply: number;
};

export type VaultOutput = {
  bankrollTokenAddress: string;
  liquidityManagerAddress: string;
  shareTokenAddress: string;
  price: number;
  wallet: number;
  poolSupply: number;
  weeklyProfit: number;
  allTimeProfit: number;
  apr: number;
};

export type VaultDetailOutput = {
  vaultIndex: string;
  bankrollBytesIdentifier: string;
  vaultAddress: string;
  bankrollTokenAddress: string;
  shareTokenAddress: string;
  controllerAddress: string;
  liquidityManagerAddress: string;
};

export type VaultAmountOutput = {
  bankrollAmount: string;
  shareTokenAmount: string;
  epochAmount: string;
  totalAmount: string;
  bankrollTokenPrice: string;
  isProfitEpcoh: number;
  isProfitTotal: number;
};

export type PoolOutput = {
  detail: VaultDetailOutput;
  amount: VaultAmountOutput;
};

export type ReferralRewardEntity = {
  /**
   * UUIDv4
   */
  id: string;
  createdAt: number;
  bankroll: string;
  client: string;
  code: string;
  owner: string;
  reward: number;
  rewardInDollar: number;
  volume: number;
  tokenAddress: string;
};

export type ReferralClaimEntity = {
  /**
   * UUIDv4
   */
  id: string;
  createdAt: number;
  bankroll: string;
  token: string;
  recipient: string;
  /**
   * @default 0
   */
  payin: number;
  /**
   * @default 0
   */
  payout: number;
};

export type CodesVolumeAndReward = {
  code: string;
  totalVolume: number;
  totalReward: number;
};

export type AwardBadge = {
  /**
   * The type of the badge to award
   *
   * @example 7
   */
  type:
    | 0
    | 1
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23;
  /**
   * The transaction hash of the game
   *
   * @example 0x1234567890123456789012345678901234567890
   */
  transactionHash: string | null;
  /**
   * The player address to award the badge to
   *
   * @example 0x1234567890123456789012345678901234567890
   */
  player: string | null;
};

export type AwardBadgeResponse = {
  awarded: boolean;
  player?: string;
  badge?:
    | 0
    | 1
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23;
};

export type WeeklyClaimer = {
  /**
   * The player address
   *
   * @example 0x1234567890123456789012345678901234567890
   */
  player: string;
  /**
   * The bankroll addresses which are claimed by the player
   *
   * @example [0x1234567890123456789012345678901234567890, 0x1234567890123456789012345678901234567890]
   */
  bankrolls: string[];
};

export type BadgeResponse = {
  awarded: boolean;
  player?: string;
  badge?:
    | 0
    | 1
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23;
};

export type SummaryResponse = {
  totalEarnings: number;
  totalWINRLocked: number;
  totalvWINRLocked: number;
};

export type TakeLevelupSnapshotInput = {
  player: string;
};
